/*Problem
Implement the following Function
def ProductSmallestPair(sum, len, arr)
The function accepts an integers sum and an integer array arr of size len. Implement the function to find the pair, (arr[j], arr[k]) where j!=k, such that arr[j] and arr[k] are the least two elements of array (arr[j] + arr[k] <= sum) and return the product of element of this pair.
NOTE
Return -1 if array is empty or if n<2 Return 0, if no such pairs found
Input Format
First Line, n denotes no.of elements of an array Second Line, n elements of an array Third Line, sum
Constraints
All computed values lie within integer range
Output Format
value, product of smallest pair
Sample Input 0:
7
5 2 4 3 9 7 1
9
Sample Output 0:
2
Explanation 0:
Pair of least two element is (2, 1) and it's sum (2 + 1) = 3 < 9, 
Product of (2, 1) 2*1 = 2. 
Thus, output is 2
*/
#include <stdio.h>
#include <stdlib.h>
int compare(const void *a, const void *b) {
    return ((int)a - (int)b);
}
int main() {
    int n;
    scanf("%d", &n);
    int arr = (int)malloc(n * sizeof(int));    
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    int s;
    scanf("%d", &s);
    qsort(arr, n, sizeof(int), compare);
    if (n == 0 || n < 2) {
        printf("-1\n");
    } else {
        int k = 0;
        for (int i = 1; i < n; i++) {
            if (arr[i - 1] + arr[i] <= s) {
                k = 1;
                printf("%d\n", arr[i - 1] * arr[i]);
                break;
            }
        }
        if (k == 0) {
            printf("0\n");
        }
    }
    free(arr); // Free dynamically allocated memory
    return 0;
}
