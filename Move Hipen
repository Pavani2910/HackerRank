/*program
Implement the following functions.a
char* MoveHyphen(char str[],int n);
The function accepts a string “str” of length ‘n’, that contains alphabets and hyphens (-). Implement the function to move all hyphens(-) in the string to the front of the given string.
NOTE:- Return null if str is null.
Input Format:
A string with hiphens
Constraints
Return null if str is null.
Output Format
string in which all hiphens are move at the front
Sample Input 0
Move-Hyphens-to-Front
Sample Output 0
--- MoveHyphenstoFront
Explanation 0
The string “Move-Hyphens-to-front” has 3 hyphens (-), which are moved to the front of the string, this output is “— MoveHyphentoFront”
*/

#include <stdio.h>
#include <string.h>

void MoveHyphen(char *str) {
    if (str == NULL) {
        return;
    }

    char hyphens[100]; // Assuming a maximum length of 100 characters for hyphens
    char characters[100]; // Assuming a maximum length of 100 characters for characters
    int hyphenIndex = 0;
    int charIndex = 0;

    for (int i = 0; str[i] != '\0'; i++) {
        if (str[i] == '-') {
            hyphens[hyphenIndex++] = str[i];
        } else {
            characters[charIndex++] = str[i];
        }
    }

    hyphens[hyphenIndex] = '\0';
    characters[charIndex] = '\0';

    // Ensure there is a space between hyphens and characters if both are present
    if (hyphenIndex > 0 && charIndex > 0) {
        hyphens[hyphenIndex] = ' ';
        hyphens[hyphenIndex + 1] = '\0';
    }

    strcat(hyphens, characters);
    strcpy(str, hyphens);
}

int main() {
    char s[100]; // Assuming a maximum input length of 100 characters

    printf("Enter a string: ");
    fgets(s, sizeof(s), stdin);

    // Remove the newline character at the end of the input
    s[strcspn(s, "\n")] = '\0';

    MoveHyphen(s);
    printf("%s\n", s);

    return 0;
}
