/*problem
N-base notation is a system for writing numbers that uses only n different symbols, This symbols are the first n symbols from the given notation list(Including the symbol for 0)
Decimal to n base notation are (0:0, 1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7, 8:8, 9:9, 10:A,11:B and so on upto 35:Z)
Implement the following function
Char* DectoNBase(int n, int num)
The function accept positive integer n and num Implement the function to calculate the n-base equivalent of num and return the same as a string
Steps:
Divide the decimal number by n,Treat the division as the integer division
Write the the remainder (in n-base notation)
Divide the quotient again by n, Treat the division as integer division
Repeat step 2 and 3 until the quotient is 0
The n-base value is the sequence of the remainders from last to first
Input Format:
First Line, n denotes base of the number system
Second Line, num denotes the decimal number
Constraints
1 < n < = 36
Output Format
value, dec to Nbase system
Sample Input 0:
12
718
Sample Output 0:
4BA
Explanation 0:
num       Divisor       quotient       remainder
718         12             59             10(A)
59          12              4             11(B)
4           12              0             4(4)
*/
#include <stdio.h>
#include <stdlib.h>

char* dectoNBase(int n, int num) {
    char* res = (char*)malloc(32 * sizeof(char)); // Assuming a maximum of 32 characters, change accordingly.
    int quotient = num / n;
    int* rem = (int*)malloc(32 * sizeof(int)); // Assuming a maximum of 32 elements, change accordingly.
    int remSize = 1;
    rem[0] = num % n;

    while (quotient != 0) {
        rem[remSize] = quotient % n;
        quotient = quotient / n;
        remSize++;
    }
int i;
    int resIndex = 0;
    for (i = remSize - 1; i >= 0; i--) {
        if (rem[i] > 9) {
            res[resIndex] = (char)(rem[i] - 9 + 64);
        } else {
            res[resIndex] = (char)(rem[i] + '0');
        }
        resIndex++;
    }

    res[resIndex] = '\0'; // Null-terminate the string
    free(rem);
    return res;
}

int main() {
    int n, num;
    scanf("%d %d", &n, &num);
    char* result = dectoNBase(n, num);
    printf("%s\n", result);
    free(result);
    return 0;
}
