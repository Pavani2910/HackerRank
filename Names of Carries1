/*problem
A carry is a digit that is transferred to left if sum of digits exceeds 9 while adding two numbers from right-to-left one digit at a time
You are required to implement the following function.
int NumberOfCarries(int num1 , int num2);
The functions accepts two numbers ‘num1’ and ‘num2’ as its arguments. You are required to calculate and return the total number of carries generated while adding digits of two numbers ‘num1’ and ‘ num2’.
Input Format
First line, first number Second line, second number
Constraints
num1, num2 >= 0
Output Format
No. of carries
Sample Input 0
451
349
Sample Output 0
2
Explanation 0
Adding ‘num 1’ and ‘num 2’ right-to-left results in 2 carries since ( 1+9) is 10. 1 is carried and (5+4=1) is 10, again 1 is carried. Hence 2 is returned.
*/
#include <stdio.h>

int NumberOfCarries(int num1, int num2) {
    int carry = 0;
    int totalCarries = 0;

    while (num1 > 0 || num2 > 0) {
        int digit1 = num1 % 10;
        int digit2 = num2 % 10;
        int sum = digit1 + digit2 + carry;

        if (sum >= 10) {
            carry = 1;
            totalCarries++;
        } else {
            carry = 0;
        }

        num1 /= 10;
        num2 /= 10;
    }

    return totalCarries;
}

int main() {
    int num1, num2;

    printf("Enter the first number: ");
    scanf("%d", &num1);

    printf("Enter the second number: ");
    scanf("%d", &num2);

    int carries = NumberOfCarries(num1, num2);
    printf("Number of carries: %d\n", carries);

    return 0;
}
